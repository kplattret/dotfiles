let mapleader = " "

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'tpope/vim-commentary'
Plug 'joshdick/onedark.vim'
Plug 'sheerun/vim-polyglot'
Plug 'itchyny/lightline.vim'
Plug 'Yggdroot/indentLine'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'ntpeters/vim-better-whitespace'
Plug 'valloric/youcompleteme'
Plug 'tpope/vim-endwise' " Automatically add `end` after `if`, `do`, `def`, etc
Plug 'jiangmiao/auto-pairs' " Insert or delete brackets, parens, quotes in pair
Plug 'etdev/vim-hexcolor' " Highlight HEX and RGB color codes in CSS files
call plug#end()

" Use 24-bit mode in Vim/Neovim
if (empty($TMUX))
  if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  if (has("termguicolors"))
    set termguicolors
  endif
endif

colorscheme onedark
let g:lightline = { 'colorscheme': 'onedark' }
let g:indentLine_char = '‚ñè'

set nocompatible      " no compatibility with Vi
set noswapfile        " don't create swap file
set hidden            " allow buffer change w/o saving
set lazyredraw        " don't update while executing macros
set splitbelow        " open split below
set splitright        " open vertical split to right
set number            " display line numbers
set cursorline        " highlight current line
set scrolloff=5       " keep at least 5 lines below cursor
set tabstop=2         " set tab character to 2 characters
set softtabstop=2     " interpret tab as an indent command
set expandtab         " turn tabs into whitespace
set shiftwidth=2      " indent width for autoindent
set clipboard=unnamed " share macOS clipboard

" Wrap text beyond 100th character
set textwidth=100
let &colorcolumn="81,101"

nmap <Left> :echoe "Use h"<cr>
nmap <Right> :echoe "Use l"<cr>
nmap <Up> :echoe "Use k"<cr>
nmap <Down> :echoe "Use j"<cr>

nmap <C-H> <C-W><C-H>
nmap <C-J> <C-W><C-J>
nmap <C-K> <C-W><C-K>
nmap <C-L> <C-W><C-L>

imap kj <esc>
nmap 0 ^
nmap j gj
nmap k gk

nmap <leader>Q :qall<cr>
nmap <leader>W :wq<cr>
nmap <leader>e :e<cr>
nmap <leader>q :q<cr>
nmap <leader>w :w<cr>

nmap <leader>rm :vsp README.md<cr>
nmap <leader>sc :vsp db/schema.rb<cr>
nmap <leader>so :source $MYVIMRC<cr>
nmap <leader>vr :tabe $MYVIMRC<cr>

" Bind `q` to close the buffer for help files
autocmd Filetype help nmap <buffer> q :q<cr>

" Use the Silver Searcher
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif

" Bind \ to grep shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nmap \ :Ag<space>

" vim-polyglot options
let g:vim_markdown_conceal = 0

" Enable spell-check for Markdown files
autocmd FileType markdown setlocal spell
