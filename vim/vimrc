let mapleader = " "

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rails', { 'for': 'ruby' }
Plug 'tpope/vim-commentary'
Plug 'joshdick/onedark.vim'
Plug 'sheerun/vim-polyglot'
Plug 'itchyny/lightline.vim'
Plug 'Yggdroot/indentLine'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'ntpeters/vim-better-whitespace'
Plug 'valloric/youcompleteme'
Plug 'tpope/vim-endwise' " Automatically add `end` after `if`, `do`, `def`, etc
Plug 'jiangmiao/auto-pairs' " Insert or delete brackets, parentheses, quotes in pair
Plug 'etdev/vim-hexcolor' " Highlight HEX and RGB color codes in CSS files
Plug 'w0rp/ale' " Asynchronous linting/fixing for Vim
Plug 'kana/vim-textobj-user' " Create your own text objects
Plug 'kana/vim-textobj-entire' " Text objects for entire buffers
Plug 'junegunn/rainbow_parentheses.vim' " Show nested parentheses in different colours
Plug 'junegunn/goyo.vim' " Distraction-free writing
Plug 'jremmen/vim-ripgrep' " Like the Silver Searcher, but faster
Plug 'jparise/vim-graphql' " GraphQL support
Plug 'elixir-editors/vim-elixir' " Elixir language support
Plug 'slashmili/alchemist.vim' " Elixir completion, docs and Mix/IEx integration
Plug 'janko/vim-test' " Wrapper for running tests
call plug#end()

if (empty($TMUX) && has("termguicolors"))
  set termguicolors " Use 24-bit mode
endif

if filereadable(expand("$HOME/.vim/plugged/onedark.vim/colors/onedark.vim"))
  colorscheme onedark
endif

set nocompatible " No compatibility with Vi
set noswapfile " Don't create swap file
set hidden " Allow buffer change w/o saving
set lazyredraw " Don't update while executing macros
set splitbelow " Open split below
set splitright " Open vertical split to right
set number " Display line numbers
set cursorline " Highlight current line
set scrolloff=5 " Show at least 5 lines below cursor
set tabstop=2 " Set tab character to 2 spaces
set softtabstop=2 " Interpret tab as an indent command
set expandtab " Turn tabs into whitespace
set shiftwidth=2 " Indent width for autoindent
set clipboard=unnamed " Share macOS clipboard
set textwidth=100 " Wrap text beyond 100th column
set foldmethod=indent " Fold code based on indentation
set undofile " Enable persistent undo
set undodir=$TMPDIR " Use system temp folder for undo files
let &colorcolumn="81,101" " Highlight 81st and 101st columns

nmap <Left> :echoe "Use h"<cr>
nmap <Right> :echoe "Use l"<cr>
nmap <Up> :echoe "Use k"<cr>
nmap <Down> :echoe "Use j"<cr>

nmap <C-H> <C-W><C-H>
nmap <C-J> <C-W><C-J>
nmap <C-K> <C-W><C-K>
nmap <C-L> <C-W><C-L>

imap kj <esc>
nmap 0 ^
nmap j gj
nmap k gk
nmap \ :Rg<space>

nmap <leader>e :e<cr>
nmap <leader>q :q<cr>
nmap <leader>w :w<cr>
nmap <leader>sc :vsp db/schema.rb<cr>
nmap <leader>so :source $MYVIMRC<cr>
nmap <leader>g :Goyo<cr>

nmap <leader>l :set invrelativenumber<cr>

" Bind `q` to close the buffer for help files
autocmd Filetype help nmap <buffer> q :q<cr>

" vim-polyglot options
let g:vim_markdown_conceal = 0

" Enable spell-check for Markdown files
autocmd FileType markdown setlocal spell

" netrw options
let g:netrw_banner = 0 " Remove the directory banner
let g:netrw_liststyle = 3 " Set tree view as default
let g:netrw_bufsettings = 'nu' " Show line numbers
let g:netrw_preview = 1 " Open preview in vertical split
let g:netrw_alto = 0 " Open preview to the right

augroup netrw_mapping
  autocmd!
  autocmd filetype netrw call NetrwMapping()
augroup END

function! NetrwMapping()
  noremap <buffer> <C-L> <C-W><C-L>
endfunction

" lightline options
let g:lightline = { 'colorscheme': 'onedark' }

" indentLine options
let g:indentLine_char = '‚ñè'

" goyo.vim options
let g:goyo_width = 100

" vim-ripgrep options
let g:rg_highlight = 1

" ctrlp.vim options
if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif

nmap <leader>a :call ToggleAlternateFile()<cr>
function! ToggleAlternateFile()
  let extension = expand('%:e')

  if extension == 'rb'
    execute "AV"
  endif
endfunction

" Keep all folds open when a file is opened
augroup OpenAllFoldsOnFileOpen
  autocmd!
  autocmd BufRead * normal zR
augroup END
